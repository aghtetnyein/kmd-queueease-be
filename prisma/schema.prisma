generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums for roles and statuses
enum Role {
  ADMIN
  CUSTOMER
}

enum QueueProgressStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum QueueStatus {
  WAITLIST
  SERVING
  COMPLETED
}

// Admin model
model Admin {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  phoneNo  String?
  role     Role    @default(ADMIN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Customer model
model Customer {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  phoneNo  String?
  role     Role    @default(CUSTOMER)

  orders        Order[]
  queues        Queue[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Restaurant model
model Restaurant {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  location   String
  qrCode     String
  sharedLink String

  resources     Resource[]
  orders        Order[]
  queues        Queue[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Resource model
model Resource {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  meals  Meal[]
  tables Table[]
  staff  Staff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Meal model
model Meal {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float

  resourceId String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  orderMeals OrderMeal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Table model
model Table {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  tableNo   String
  tableSize Int

  resourceId String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Staff model
model Staff {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  resourceId String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order model
model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  queueId      String     @db.ObjectId
  queue        Queue      @relation(fields: [queueId], references: [id], onDelete: Cascade)
  tableId      String     @db.ObjectId
  table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  meals OrderMeal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// OrderMeal model
model OrderMeal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  mealId String @db.ObjectId
  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Queue model
model Queue {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  status         QueueStatus
  progressStatus QueueProgressStatus
  partySize      Int
  waitTime       Int
  position       Int

  orders   Order[]
  booking  Booking?
  waitlist Waitlist?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Booking model
model Booking {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  queueId String @unique @db.ObjectId
  queue   Queue  @relation(fields: [queueId], references: [id], onDelete: Cascade)

  partySize Int
  waitTime  Int
  position  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Waitlist model
model Waitlist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  queueId String @unique @db.ObjectId
  queue   Queue  @relation(fields: [queueId], references: [id], onDelete: Cascade)

  partySize Int
  waitTime  Int
  position  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
