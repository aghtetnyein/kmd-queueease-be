generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum QueueProgressStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum QueueStatus {
  BOOKING
  WAITLIST
  SERVING
  COMPLETED
}

// Admin model
model Admin {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  profileImgUrl String?
  phoneNo       String      @unique
  email         String?     @unique
  password      String
  restaurant    Restaurant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Customer model
model Customer {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  phoneNo          String  @unique
  name             String
  email            String? @unique
  password         String?
  isAccountCreated Boolean @default(false)

  orders        Order[]
  queues        Queue[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Restaurant model
model Restaurant {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String @unique
  location          String
  qrCode            String
  sharedLink        String
  openDays          Int[]
  openHour          String
  closeHour         String
  slotDurationInMin Int

  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String @unique @db.ObjectId

  meals         Meal[]
  tables        Table[]
  staff         Staff[]
  orders        Order[]
  queues        Queue[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Meal model
model Meal {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Float
  category String

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  orderMeals OrderMeal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

// Table model
model Table {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  tableNo   String
  tableSize Int
  status    TableStatus @default(AVAILABLE)

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Staff model
model Staff {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  phoneNo String @unique
  role    String

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order model
model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  queueId      String     @db.ObjectId
  queue        Queue      @relation(fields: [queueId], references: [id], onDelete: Cascade)
  tableId      String     @db.ObjectId
  table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  meals OrderMeal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// OrderMeal model
model OrderMeal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  mealId String @db.ObjectId
  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Queue model
model Queue {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  status         QueueStatus
  progressStatus QueueProgressStatus
  partySize      Int
  position       Int?
  timeSlot       DateTime?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customerId   String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
